-------------------------------------------------------------------------------------------------------------------------------------------
================================================================ 第 I 部分: 加密 ===========================================================
-------------------------------------------------------------------------------------------------------------------------------------------

第二章:
    密码学的工具箱:
        古典加密, 对称加密, 非对称加密, 数字签名, 消息认证码, 伪随机数生成器

    古典密码学: 移位算法  替换算法 , 凯撒密码[移位算法], Enigma加密机器[替换算法]

第三章: 常用的对称加密算法 DES, AES
    比特序列:
        任何一个段文字甚至字母都可以转化为一个byte[], 这过程叫编码, 而这个byte[] 叫做比特序列

    XOR: 是针对相同长度的比特序列的一种运算
        异或操作运算规则,参考翻硬币   0: 不翻  1:翻
        0 + 0 = 0 -> (不翻) + (不翻) = (不翻)
        0 + 1 = 1 -> (不翻) + (翻) = (翻)
        1 + 0 = 1 -> (翻) + (不翻) = (翻)
        1 + 1 = 0 -> (翻) + (翻) = (不翻)

    Feistel网络:
        Feistel 网络的中的一轮, 每轮之间交换左侧和右侧, 这种模式是DES 加密算法的核心模式! 它的组件包括: 左侧比特序列, 右侧比特序列, 子秘钥, 轮函数f(...), XOR操作

    DES : (64比特为一组)
        (Data Encryption Standard), DES 是一种以64比特为一组的明文加密成64比特密文的对称机密算法! 这种分组的加密算法称之为分组加密算法;

        三重DES(Triple DES)  加密(Encryption) -> 解密(Decryption) -> 加密(Encryption); DES-EDE2, DES-EDE3 分别表示使用 不同子秘钥 的个数

    AES : (128比特为一组) 最好的对称加密算法
        (Advanced Encryption Standard), 以128比特为一组的分组加密算法

第四章: 对称加密   分组加密的模式
    明文分组:
        使用分组密码加密算法对明文进行分组的操作后产生的小组称为明文分组!
    密文分组:
        将明文分组进行加密后得到的密文组称为密文分组!

    ECB : Electronic CodeBook 电子密码模式
    ECB模式弱点 : 主动攻击者不需要知道密文内容, 密文分组, 秘钥 只需对所有分组的顺序进行打乱就可以操作明文


第五章: 非对称加密
    储物柜问题: 投钱关闭, 钥匙开锁 -> 钱币是关闭秘钥, 钥匙是开启秘钥

    秘钥配送问题:  在对称加密通信系统中, 如果A发送了加密消息message到B,
                 B如果不知道解密消息的秘钥则接收到的消息是无法解密的,
                 这就要求A在发送消息时必须把加密消息的秘钥也同时发送给B,
                 这样就造成了秘钥和加密信息同时被拦截的可能性,
                 这种问题就是秘钥传送问题或秘钥配送问题


    秘钥分配中心 解决方案和存在的问题
    过程:
        1、A用户 和 B用户要想通信, 必须先注册一个系统获取自己的秘钥, 分别对应秘钥A和秘钥B
        2、A用户 想和 B用户 通信, A用户向 秘钥分配中心 发出请求
        3、秘钥分配中心 向 A用户 发送秘钥A加密过的 会话秘钥 信息
        4、秘钥分配中心 向 B用户 发送秘钥B加密过的 会话秘钥 信息
        5、A用户用 秘钥A 对来自 秘钥分配中心 的消息进行解密,得到 会话秘钥
        6、A用户用 会话秘钥对 发送给 B用户的 消息进行加密
        7、B用户用 秘钥B 对来自 秘钥分配中心 的消息进行解密,得到 会话秘钥
        8、B用户用 会话秘钥对来自 A用户的 消息进行解密,得到解密信息
        9、A用户 和 B用户 删除会话秘钥
    问题:
        1、秘钥分配中心 压力大
        2、秘钥分配中心 一旦挂掉,加密通信系统瘫痪
        3、秘钥分配中心 一旦被攻克, 整个加密通信系统将毫无秘密可言, 非常危险


    RSA:
        RSA 加密算法 : 密文 = 明文^E mod N; 在这个算法中 密文和明文都是数字, 同样 E,N 也都是数字
        RSA 解密算法 : 明文 = 密文^D mod N; 在这个算法中 密文和明文都是数字, 同样 D,N 也都是数字


第六章: 混合加密系统
    加密过程: 加密 -> 加密 -> 组合 (a.对称加密 -> b.非对称加密 -> c.组合)
    解密过程: 拆分 -> 解密 -> 解密 (a.拆分 -> b.非对称解密 -> c.对称解密)

    伪随机数生成器: 在混合加密系统中, 伪随机数生成器用来生成会话秘钥, 如果生成的会话秘钥特别的简单,会被轻易的破解! 因此在生成会话秘钥的时候要特别的加强,
    但对于非对称加密来说,非对称加密的强度要高过对称加密, 因为一旦非对称加密一旦被破译, 所有的信息就破译了!

-------------------------------------------------------------------------------------------------------------------------------------------
================================================================ 第 II 部分: 认证 ===========================================================
-------------------------------------------------------------------------------------------------------------------------------------------
第七章 数字指纹
        单向散列函数: 有输入有输出的一种函数, 这种函数的输入称为消息, 输出称为散列值! 散列值 又称为 哈希值, 消息摘要, 数字指纹
        单向散列函数的特性: 1、输出固定长度的值    2、运算快速      3、具有抗碰撞性    4、单向性(通过消息计算出散列值非常容易,但通过散列值推算消息几乎是不可能的)

        单向散列函数的用处:
                        1、校验文件是否被篡改  2、基于口令的加密(Password Based Encryption)
                        3、消息认证码(Message Authentication Code)   4、数字签名     5、伪随机数生成器
                        6、一次性口令

        单向散列函数无法解决的问题: 只能验证文件是否为修改过, 但无法辨认出伪装来! 主动攻击者伪装为消息发送者这是验证不出来的!
        数字指纹的破解: 暴力破解(根据文件的冗余性, 破解上限次数为2^哈希值比特位数), 生日攻击

第八章 消息认证码
        为了解决消息指纹的伪装问题, 引入认证相关的知识, 消息认证码, 是在Hash的基础上对消息指纹进行加密
        消息认证码: 单向散列函数的输入值 为消息+共享秘钥, 输出的定长的值就是消息认证码, 不仅可以解决消息的一致性也可以解决伪装的问题!
        HMAC: 使用单向散列函数获取文件散列值的方式, 任何高强度的单向散列函数都可以用来作为HMAC的算法!

        消息认证码不能解决的问题:
            对第三方证明问题, 即无法向第三方证明是 持有共享秘钥的 A方 还是 持有秘钥的B方 向A/B 发送了一条消息! 这也就造成了不具有抗否认的问题!

第九章 数字签名
        Alice 和 Bob 共同持有 生成消息认证码的 共享秘钥, 由于消息认证码无法解决 一条消息是由Alice发送的还是由Bob发送的, 引入数字签名的概念!
        假设 Alice 和 Bob 不共享秘钥, 且发送消息者只能签名, 消息接收者只能验证, 这就解决了一致性, 伪装, 抗否认性等通信中的问题!
        数字签名的使用过程: 生成签名和验证签名, 私钥签名 公钥认证!

        公钥证书: 为保证某个公钥的一致性,为公钥进行签名 对公钥进行数字签名后得到的就是公钥证书


总结:
        1、文件指纹  : 通过单向散列函数计算出文件的文件指纹 来断定文件是否被篡改过!
        2、消息认证码: 通过单向散列函数和共享秘钥共同产生的散列值 来断定文件是否被篡改和伪装, 解决不了三方验证和抗否认性的问题!
        3、数字签名  : 用私钥签名公钥认证的方式进行 签名和认证的一种认证技术!

        秘钥是加密的精华, 散列值是认证的精华!

第十章 证书
        为公钥上加上数字签名就是证书, 公钥证书也简称证书
        http://www.symantec.com/digital-id      以后有时间再弄吧, 因中国搞的防火墙太low, 网速太慢!


-------------------------------------------------------------------------------------------------------------------------------------------
================================================================ 第 III 部分: 秘钥, 随机数, 应用技术 ===========================================================
-------------------------------------------------------------------------------------------------------------------------------------------
第十一章 秘钥
        秘钥的种类:
            1、对称加密中的共享秘钥, 非对称加密中的 共钥和私钥
            2、消息认证码中的共享秘钥, 数字签名中的共钥和私钥
            3、会话秘钥和主秘钥
            4、加密明文的秘钥和加密秘钥的秘钥



第十三章 GPG
1、GnuPG 的使用
yangjianwei@yangjianweideMacBook-Pro ~ % gpg --version
gpg (GnuPG) 2.2.23
libgcrypt 1.8.6
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: /Users/yangjianwei/.gnupg
Supported algorithms:
Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
        CAMELLIA128, CAMELLIA192, CAMELLIA256
Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
Compression: Uncompressed, ZIP, ZLIB, BZIP2

yangjianwei@yangjianweideMacBook-Pro ~ % gpg2 --full-gen-key
gpg (GnuPG) 2.2.23; Copyright (C) 2020 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
  (14) Existing key from card
Your selection? 1
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (3072) 2048
Requested keysize is 2048 bits
Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years
Key is valid for? (0) 1y
Key expires at 六  9/18 00:27:40 2021 CST
Is this correct? (y/N) y

GnuPG needs to construct a user ID to identify your key.

Real name: 杨建伟
Email address: 2017585616@qq.com
Comment: 杨建伟生成密钥备注
You are using the 'utf-8' character set.
You selected this USER-ID:
    "杨建伟 (杨建伟生成密钥备注) <2017585616@qq.com>"

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
gpg: /Users/yangjianwei/.gnupg/trustdb.gpg: trustdb created
gpg: key E7FE9C156F8C136A marked as ultimately trusted
gpg: directory '/Users/yangjianwei/.gnupg/openpgp-revocs.d' created
gpg: revocation certificate stored as '/Users/yangjianwei/.gnupg/openpgp-revocs.d/2AE766AA0CA8E9EF71891547E7FE9C156F8C136A.rev'
public and secret key created and signed.

pub   rsa2048 2020-09-17 [SC] [expires: 2021-09-17]
      2AE766AA0CA8E9EF71891547E7FE9C156F8C136A
uid                      杨建伟 (杨建伟生成密钥备注) <2017585616@qq.com>
sub   rsa2048 2020-09-17 [E] [expires: 2021-09-17]

yangjianwei@yangjianweideMacBook-Pro ~ % gpg2 --export --armor E7FE9C156F8C136A
-----BEGIN PGP PUBLIC KEY BLOCK-----

mQENBF9jjyABCADhS4Wqeh5bsWxx/A+mhlM+Xdm24l6w70dl52sITyOsTwVw8drz
R5YkollsdB/TiSwpN+xBVPF1dZLVj9KlvaAAGUB0t3kvvWnXXUnT13DlQP3xBJwS
nchr391EZ3V/9OXZCIScYsu8cgsai8QxB+N2KLV2m2+EzTOvRzT6kpW6HV3yDdOI
RBpEIgT8wvHzo5itK+ZlyCGqW5bTtv4pgtW0H6jWojxHfOh3588Dbe+Y8WCW8NAU
mYaQMvJR+GhKCS5wdK0ZV1xoVxzgD8EDiM4ABxAMSoqgvwZEvccdp5XXHFLdH3L9
h+3umOBskiOevZgQCbzcimBgbptAGA1hY2LfABEBAAG0O+adqOW7uuS8nyAo5p2o
5bu65Lyf55Sf5oiQ5a+G6ZKl5aSH5rOoKSA8MjAxNzU4NTYxNkBxcS5jb20+iQFU
BBMBCAA+FiEEKudmqgyo6e9xiRVH5/6cFW+ME2oFAl9jjyACGwMFCQHhM4AFCwkI
BwIGFQoJCAsCBBYCAwECHgECF4AACgkQ5/6cFW+ME2otoAf/Zh5WXgGu4mmNuKKn
2V7cOuntQ22IiBLlK8eL9MZaChGnMZKJF01KkL4ZIKjCaslMXO53rHQw0UCMb3wH
YAR9s3HUYTf52GQnOZB5Ip1vaH6e6+MApzJ6JS1WDqo5pQ5SkNW7ulG/RoU8Nccl
/NUj3ap++jQG+75eDfJmWstZNPpMwqnhAfMJU2VA1CgAjl4sIWjlKN1tHr7otzFi
UefhXcd+5DPKaGRp2rsvQt8rq1ekHmdKfMEO1trP64NFP7tINhnS65E92SDtipCx
HPNYA1TxSSwBxMYlERQjj4dsVBth2zKRKwPGW4TCmrHrlxdSkVMcqeI/pffMgzWG
9VZYcrkBDQRfY48gAQgAxSsn0SL5fglQPhZDLMO8lULiIqnETrnPLRZc4gKeJ0wa
JL2k9baUMf2eg4os/am/QzI9HtoNhXVrJEd2bfQObyOQt2eV3tBlwe5RSMTRqxFX
fQe+GyQe2CO42G/9plgfM+OvYUHU/Ps3Ms+sP0XNC9n55JRGRtkaPYWuhmYI4LbP
Rv1ZatFXEy1bIJ416X5mbHg0xmxMmCRIjbP3CJP7atZ/agEfnEhbLQpxwVqaqzdk
8xpulwoJ+CS7uIz/6b4dSj9AQwMAdledPCzhls39T6Yoq6s6cuBN9jS/rvQMmQin
u8wYWU33pooZ9jSBNHhpDGXYMV97Q/agpB4GG3WExwARAQABiQE8BBgBCAAmFiEE
Kudmqgyo6e9xiRVH5/6cFW+ME2oFAl9jjyACGwwFCQHhM4AACgkQ5/6cFW+ME2qn
GwgAuIt5pY9uLuT3LbFDJo711M8j278DLzKVbJ2lAOhUPwJ3m9Qhd1SzZtyR53Sc
POFztHFJy8/j6YZq6YdDPfKZDsmfTOf1zUpsBIUeUqmJtCaWQ72tMDoCk1cth6A1
ypNwt5KytSY+0pbMkXKgUOEiZ7itxCwd1e7ovapfpT32WdMoV3PK8fC4tDXE3BaM
4pH89iNjbPJ3qCuUSySgb4ABLGKgubHUJ5irOvo29LAoilXhEl78/V0RhhI2bqtT
IuemuLRhD+97r9ypvebM/8BLUrQ8cvDWqDQS46v/96gTBnG9tOvl8SdD2SZlxigN
yKEpTeBDjaWtvLlmaKDKdq8+tw==
=1r9d
-----END PGP PUBLIC KEY BLOCK-----


































































